#include "ros/ros.h"
#include <tf/tf.h>
#include <tf/transform_listener.h>
#include <sensor_msgs/CameraInfo.h>
#include <geometry_msgs/TwistStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseStamped.h>

#include <visualization_msgs/Marker.h>


#include "std_msgs/String.h"
#include <lanelet2_core/primitives/Lanelet.h>
#include <lanelet2_io/Io.h>
#include <lanelet2_io/io_handlers/Factory.h>
#include <lanelet2_io/io_handlers/Writer.h>
#include <lanelet2_projection/UTM.h>
#include <lanelet2_core/LaneletMap.h>
#include <lanelet2_core/primitives/BasicRegulatoryElements.h>
#include <lanelet2_core/primitives/LineString.h>
#include <lanelet2_core/primitives/LineStringOrPolygon.h>

#include <lanelet2_core/geometry/BoundingBox.h>
#include <lanelet2_core/geometry/Lanelet.h>
#include <lanelet2_core/geometry/Point.h>

#include <lanelet2_core/primitives/Lanelet.h>
#include <Eigen/Eigen>

#include <autoware_msgs/Signals.h>


#include <cstdio>

#include <sstream>
#include "rosUTM.h"

//using namespace lanelet;

#define TL_BY_LANELET 0
#define TL_BY_NEAREST 1

#define signalLampRadius 0.3

static std::string camera_id_str;


//std::string example_map_path = "/home/simon/work/catkin_ws/src/lanelet2/lanelet2_maps/res/mapping_example.osm";
std::string example_map_path = "/home/simon/work/peoria_data/map/Lanelet2/Peoria_0301_2019_fixed.osm";

//static int adjust_proj_x = 0;
//static int adjust_proj_y = 0;

typedef struct
{
  double thiX;
  double thiY;
  double thiZ;
} Angle;

//static VectorMap vmap;
//static Angle cameraOrientation; // camera orientation = car's orientation

static Eigen::Vector3f position;
static Eigen::Quaternionf orientation;
static float fx,
  fy,
  imageWidth,
  imageHeight,
  cx,
  cy;

static  tf::StampedTransform camera_to_map_tf;
static tf::StampedTransform map_to_camera_tf;

//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

/* Callback function to shift projection result */
/*
void adjust_xyCallback(const autoware_msgs::AdjustXY::ConstPtr &config_msg)
{
  adjust_proj_x = config_msg->x;
  adjust_proj_y = config_msg->y;
}
*/
//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

void cameraInfoCallback(const sensor_msgs::CameraInfo::ConstPtr camInfoMsg)
{


  //  std::cout << "recieved camera information\n";
  fx = static_cast<float>(camInfoMsg->P[0]);
  fy = static_cast<float>(camInfoMsg->P[5]);
  imageWidth = camInfoMsg->width;
  imageHeight = camInfoMsg->height;
  cx = static_cast<float>(camInfoMsg->P[2]);
  cy = static_cast<float>(camInfoMsg->P[6]);
}


//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------


void get_transform(std::string from_frame, std::string to_frame, Eigen::Quaternionf &ori, Eigen::Vector3f& pos, tf::StampedTransform & tf)
{

  static tf::TransformListener listener;
  // tf::StampedTransform tf;
 
  // target_frame    source_frame
  ros::Time now = ros::Time();
  listener.waitForTransform(from_frame, to_frame, now, ros::Duration(10.0));
  listener.lookupTransform(from_frame, to_frame, now, tf);

  std::cerr << " geting transform for " << from_frame << " and " << to_frame <<"\n";
 
  tf::Vector3 &p = tf.getOrigin();
  tf::Quaternion o = tf.getRotation();

  std::cerr << "transform origin = " << p.x() << " " << p.y() << " "<< p.z() <<"\n";
  std::cerr << "transform rotation = " << o[0] << " " << o[1] << " "<< o[2] << " " <<o[3] << "\n";

  pos.x() = p.x();
  pos.y() = p.y();
  pos.z() = p.z();
  ori.w() = o.w();
  ori.x() = o.x();
  ori.y() = o.y();
  ori.z() = o.z();

}
/*
void getTransform(Eigen::Quaternionf &ori, Eigen::Vector3f& pos)
{
  static tf::TransformListener listener;
 
  tf::StampedTransform tf;

  
  // target_frame    source_frame
  ros::Time now = ros::Time();
  listener.waitForTransform(camera_id_str, "map", now, ros::Duration(10.0));
   listener.lookupTransform(camera_id_str, "map", now, tf);
  //  listener.waitForTransform("camera", "map", now, ros::Duration(10.0));
  //  listener.lookupTransform("camera", "map", now, tf);

  std::cerr << " geting transform for " << camera_id_str << "\n";
  //  std::cerr << " trf = " << *trf.getOrigin() << " \n";
  tf::Vector3 &p = tf.getOrigin();
  tf::Quaternion o = tf.getRotation();
  std::cerr << "get origin = " << p.x() << " " << p.y() << " "<< p.z() <<"\n";


  pos.x() = p.x();
  pos.y() = p.y();
  pos.z() = p.z();
  ori.w() = o.w();
  ori.x() = o.x();
  ori.y() = o.y();
  ori.z() = o.z();
}
*/
//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------




Eigen::Vector3f transform(const Eigen::Vector3f &psrc, tf::StampedTransform &tfsource)
{
  tf::Vector3 pt3(psrc.x(), psrc.y(), psrc.z());
  tf::Vector3 pt3s = tfsource * pt3;
  Eigen::Vector3f tf_v(pt3s.x(), pt3s.y(), pt3s.z());
  return tf_v;
}




//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------


void print_line_string_points(lanelet::LineString3d ls)
{
  for (auto pi = ls.begin(); pi != ls.end(); pi++) {
    //   lanelet::Point3d p = *pi;
    std::cerr << "\t " << *pi << "\n"; 
  }
}



void make_light_marker(lanelet::Point3d p, visualization_msgs::Marker& marker, std::string frame_id, std::string ns, int tl_count, int point_count){
  
  uint32_t box_shape = visualization_msgs::Marker::CUBE; 
  
  marker.header.frame_id = frame_id;
  marker.header.stamp = ros::Time::now();
  marker.ns = ns;
  marker.id = tl_count*10+point_count;
  marker.type = box_shape;
  marker.pose.position.x = p.x();
  marker.pose.position.y = p.y();
  marker.pose.position.z = p.z();
  
  std::cerr << "Marker pos = " << p.x() << " " << p.y() << " " << p.z() << "\n";
  float s = 0.5;

  marker.scale.x = s;
  marker.scale.y = s;
  marker.scale.z = s;
  
  marker.color.r = 0.0f;
  marker.color.g = 0.0f;
  marker.color.b = 0.0f;
  marker.color.a = 1.0f;
  
  if (point_count == 0) marker.color.r = 1.0f;
  else if (point_count == 1) marker.color.g = 1.0f;
  if (point_count == 2) marker.color.b = 1.0f;
  
  marker.lifetime = ros::Duration();
}




void visualize_lanelet_linestring(int lane_id, lanelet::LineString3d ls, visualization_msgs::Marker& points,
				  visualization_msgs::Marker& line_strip,
				  std::string frame_id, std::string ns, float lr, float lg, float lb)
{

  
  points.header.frame_id = line_strip.header.frame_id = frame_id;
  points.header.stamp = line_strip.header.stamp = ros::Time::now();
  points.ns = line_strip.ns = ns;
  points.action = line_strip.action = visualization_msgs::Marker::ADD;
  
  points.pose.orientation.w = line_strip.pose.orientation.w = 1.0;
  points.id = lane_id*10+0;
  line_strip.id = lane_id*10+1;

  points.type = visualization_msgs::Marker::POINTS;
  line_strip.type = visualization_msgs::Marker::LINE_STRIP;
	
  points.scale.x = 0.2;
  points.scale.y = 0.2;
  line_strip.scale.x = 0.15; 


  points.color.g = 1.0f;
  points.color.a = 1.0f;
  line_strip.color.r = lr;
  line_strip.color.g = lg;
  line_strip.color.b = lb;
  line_strip.color.a = 1.0f;

  // fill out lane line
  for (auto i = ls.begin(); i != ls.end(); i++){
    geometry_msgs::Point p;
    p.x = (*i).x();
    p.y = (*i).y();
    p.z = 100.0; //(*i).z();
    points.points.push_back(p);
    line_strip.points.push_back(p);
  }
}

//--------------------------------------------------------------------
//
// project into image place (from AUtoware feat_proj.cpp)
// Point3 type not found -> from Vector Map maths?
//
//--------------------------------------------------------------------


bool project2(const Eigen::Vector3f &pt, int &u, int &v, bool useOpenGLCoord = false)
{
  float nearPlane = 1.0;
  float farPlane = 200.0;

  tf::Vector3 &p = camera_to_map_tf.getOrigin();
  tf::Quaternion o = camera_to_map_tf.getRotation();

  std::cerr << "transform origin = " << p.x() << " " << p.y() << " "<< p.z() <<"\n";


  
  
  Eigen::Vector3f _pt = transform(pt, camera_to_map_tf);

 
  std::cerr << "focal point = " << fx << "," << fy << "\n";
  //  std::cerr << " tf = " << trf < "\n"; 
  std::cerr << "project2: p = " << pt.transpose() << "\n"; 
  std::cerr << "project2: proj p = " << _pt.transpose() << "\n"; 


  float _u = _pt.x() * fx / _pt.z() + cx;
  float _v = _pt.y() * fy / _pt.z() + cy;


  
  u = static_cast<int>(_u);
  v = static_cast<int>(_v);
  if (u < 0 || imageWidth < u || v < 0 || imageHeight < v || _pt.z() < nearPlane || farPlane < _pt.z())
    {
      u = -1, v = -1;
      return false;
    }

  if (useOpenGLCoord)
    {
      v = imageHeight - v;
    }

  return true;
}


//-------------------------------------------------------------------------
//
//
//
//-------------------------------------------------------------------------

int main (int argc, char **argv)
{




  


  // UTM 1KM BLOCK
  lanelet::Origin originUTMZone16T_1KM({40.6846873479945, -89.59746580015032});//40.68932001755994, -89.59172921922513});
  lanelet::Origin originUTMZone16T_100KM({40.711552292880796, -89.60442872540494});
  lanelet::Origin origin({49, 8.4});
  lanelet::Origin origin2({0.0, 0.0});
  lanelet::projection::UtmProjector projector(originUTMZone16T_100KM);
  


  lanelet::projection::RosUtmProjector ros_projector(origin);
 
  lanelet::ErrorMessages errors;
  lanelet::LaneletMapPtr map = load(example_map_path, ros_projector, &errors);

 // lanelet::LaneletMapPtr map = load(example_map_path, projector, &errors);

 //  assert(errors.empty());  // error when loading Peoria OSM map - but seems to load

  ros::init(argc, argv, "talker");


  ros::NodeHandle rosnode;
  //  ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
  // ros::Rate loop_rate(10);

  ros::NodeHandle private_nh("~");
  std::string cameraInfo_topic_name;
  private_nh.param<std::string>("camera_info_topic", cameraInfo_topic_name, "/camera_info");

  /* get camera ID */
  camera_id_str = cameraInfo_topic_name;
  camera_id_str.erase(camera_id_str.find("/camera_info"));
  if (camera_id_str == "/")
    {
      camera_id_str = "camera";
    }

  
  // subcribe to camera info & image etc
  ros::Subscriber cameraInfoSubscriber = rosnode.subscribe(cameraInfo_topic_name, 100, cameraInfoCallback);
  ros::Subscriber cameraImage = rosnode.subscribe(cameraInfo_topic_name, 100, cameraInfoCallback);
  //  ros::Subscriber adjust_xySubscriber = rosnode.subscribe("/config/adjust_xy", 100, adjust_xyCallback);
  ros::Subscriber current_pose_subscriber;
  

  // publisher to visualise lanelet elements within rviz
  ros::Publisher marker_pub = rosnode.advertise<visualization_msgs::Marker>("lanelet_tl_marker", 100);

  // publisher to pub regions of interest: ie areas in image where traffic lights should be
  ros::Publisher roi_sign_pub = rosnode.advertise<autoware_msgs::Signals>("roi_signal", 100);
  
  ros::Rate loop_rate(10);




  Eigen::Vector3f pos;
 
  Eigen::Quaternionf ori;
  Eigen::Vector3f prev_position(0,0,0);
  Eigen::Quaternionf prev_orientation(0,0,0,0);


  int count = 0;
  while(ros::ok())
    {

      std::cerr << "\nROS LOOP\n";
      ros::spinOnce();
      
      try {
	// get and print trasform - for some reason getTransform was corrupting transform data
	std::cerr << "get camera position in map\n";
     
	get_transform(camera_id_str, "map", orientation, position, camera_to_map_tf);
	get_transform("map", camera_id_str, orientation, position, map_to_camera_tf);
	
      }
      catch (tf::TransformException &exc) {}
      
      std::cerr << "Camera position = " << position << "\n";
      //   std::cerr << "Camera orientation = " << orientation << "\n";
      // std::cerr <<".";

      if (prev_orientation.vec() != orientation.vec()  &&
	  prev_position != position)
	{
	  
	  lanelet::BasicPoint2d camera_position_2d(position.x(), position.y());
	  std::cerr << "current position = " << camera_position_2d << "\n";


// get n nearest lanelets to camera pose. Which lanelets are actually being used (which are reachable from current lane - is nearest even the same as the current lane? need to discard unneeded lanelets - ie not on the current way path 
	  int n_lanelets = 10;
	  lanelet::Lanelets nearest_lanelets = map->laneletLayer.nearest(camera_position_2d, n_lanelets);
	  
	  

//      int find_tl_mode = TL_BY_LANELET;
int find_tl_mode = TL_BY_NEAREST;
int viz_near_lanelets = true;
	  
      
	  //publish nearest lanelets as markers for rviz
	  int lane_count = 0;
	  if (viz_near_lanelets) {
	    for (auto i = nearest_lanelets.begin(); i != nearest_lanelets.end(); i++) {
	      lanelet::Lanelet ll = *i;
	      
	      //std::cerr << "Nearest lanelet = " << ll << "\n";
	      lanelet::LineString3d left_ls = ll.leftBound();
	      lanelet::LineString3d right_ls = ll.rightBound();
	      
	  /*
	    std::cerr << "Left bound "<< left_ls << "\n";
	    print_line_string_points(left_ls);
	    std::cerr << "Right bound "<< right_ls << "\n";
	      print_line_string_points(right_ls);
	  */
	    
	    visualization_msgs::Marker left_line_strip, left_points, right_line_strip, right_points;
	    
	    visualize_lanelet_linestring(lane_count, left_ls, left_points, left_line_strip, "map", "left_lane_bound", 1.0f, 0.0f, 0.0f);
	    visualize_lanelet_linestring(lane_count,right_ls, right_points, right_line_strip, "map", "right_lane_bound",0.0f, 0.0f, 1.0f);
	  
	    marker_pub.publish(left_points);
	    marker_pub.publish(left_line_strip);
	    marker_pub.publish(right_points);
	    marker_pub.publish(right_line_strip);

lane_count++;
}
}


      // find traffic lights by either:
      //    - lanelet: use closest lanelets related regulatory elements
      //    - geomtry: get regulatory elements closes to current position
      //    - all reg elems

      std::vector<lanelet::TrafficLight::Ptr> nearest_tl_re;
      
      if (find_tl_mode == TL_BY_LANELET) {
	
	
	int lane_count = 0;
	for (auto i = nearest_lanelets.begin(); i != nearest_lanelets.end(); i++) {
	  
	  lanelet::Lanelet ll = *i;
	  std::vector<lanelet::TrafficLight::Ptr> ll_tl_re = ll.regulatoryElementsAs<lanelet::TrafficLight>();
	    

	  std::cerr << "lane " << lane_count << " has " << ll_tl_re.size() << " traffic ligths\n"; 
	  nearest_tl_re.insert(nearest_tl_re.end(), ll_tl_re.begin(), ll_tl_re.end());

lane_count++;
	}
      }
      else if (find_tl_mode == TL_BY_NEAREST) {

	std::vector<lanelet::RegulatoryElementPtr> nearest_re = map->regulatoryElementLayer.nearest(camera_position_2d, 1);
	nearest_tl_re = lanelet::utils::transformSharedPtr<lanelet::TrafficLight>(nearest_re);
	
      }
	
      // for found traffic lights
      //  - extract points of individual lights
      //  - project into image space
      //  - check in range
      //  - create roi sign
      //  - publish
      //  - visualize in rviz by marker
      
      std::cerr << " found nearest traffic lights " << nearest_tl_re.size() << "\n";

      int tl_count = 0;
      autoware_msgs::Signals signalsInFrame;
      bool viz_tl_signs  = true;
      for (auto tli = nearest_tl_re.begin(); tli != nearest_tl_re.end(); tli++) {
	
	lanelet::LineString3d ls;
	lanelet::LineStringOrPolygon3d lights = (*tli)->trafficLights().front();
	//  std::cout << "light = " << lights << "\n";
	//bool is_ls = lights.isLineString(); 
	if (lights.isLineString()) { // traffic ligths can either polygons or linestrings
	  std::cerr << "light: " << tl_count << "\n";
	  ls = static_cast<lanelet::LineString3d>(lights);


	 
	  int point_count = 0;
	  for (auto pi = ls.begin(); pi != ls.end(); pi++) {
	    lanelet::Point3d p = *pi;

	    Eigen::Vector3f signal_center(p.x(), p.y(), p.z());

	    std::cerr << "TL Point " << signal_center.transpose() << "\n";
	    Eigen::Vector3f signal_centerx(p.x(), p.y(), p.z()+signalLampRadius); /// ????
	    int u,v;


	    // this project (or the transform function it calls) returning strange values
	    // -- false everytime

	    if (project2(signal_center, u,v, false) == true) {
	      std::cerr << "project2 call true\n";
	      int radius, ux,vx;



	      project2(signal_centerx, ux, vx, false);
	      radius = (int)sqrt((Eigen::Vector2f(ux-u,vx-v)).squaredNorm());

	      autoware_msgs::ExtractedPosition sign;
	      sign.signalId = p.id();
	      sign.u = u; // + adjust_proj_x;
	      sign.v = v; // + adjust_proj_y;
	      
	      sign.radius = radius;
	      sign.x = signal_center.x(), sign.y = signal_center.y(), sign.z = signal_center.z();
	      sign.hang = 0.0;// angle [0, 360] degrees
	      
	      sign.type = 0, sign.linkId = 0; // what values should these by\e?
	      sign.plId = 0;


	      // nexts get relative signal angle (to camera coord system)
	      // limit +- 50 degrees

	      //perhaps use related lanelet to determine if in frame 
	      // if in frame.....
	      signalsInFrame.Signals.push_back(sign);
	    }
	    else {
	      std::cerr << "project  point returned false\n";
	    }
	    if (viz_tl_signs) {
	      // visualise traffic lights
	      visualization_msgs::Marker marker;
	      make_light_marker(p, marker, "map", "lanelet_tl", tl_count, point_count);

	      if (marker_pub.getNumSubscribers() >0)
		marker_pub.publish(marker);
	    }
	    
	    point_count++;
	    
	  } // for each point pi
	} // if linestring
	else {
	  std::cerr << ">>>>>>>>>>>>>>>>>>>> traffic light is not linestring !!!!!!!!!!!!!!!!!!!!\n";
	}
	tl_count++;
      }

      signalsInFrame.header.stamp = ros::Time::now();
      std::cerr << "there are " << signalsInFrame.Signals.size() << " signals in frame\n";
      roi_sign_pub.publish(signalsInFrame);


	}
      prev_orientation = orientation;
      prev_position = position;
      
      
      // ros loop stuff
      loop_rate.sleep();
      ++count;
    }

  return 0;
}
